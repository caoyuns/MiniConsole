/*
 * MiniConsole.java
 *
 * Created on __DATE__, __TIME__
 */

package tools;

import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.LinkedList;

import javax.imageio.ImageIO;

/**
 *
 * @author  __USER__
 */
public class MiniConsole extends javax.swing.JFrame implements OutputHandler {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	public static final int QUEUE_SIZE = 20;
	InputHandler inputHandler;
	LinkedList<String> cmdQueue = new LinkedList<String>();
	int cmdIdx = 0;

	public void setInputHandler(InputHandler inputHandler) {
		this.inputHandler = inputHandler;
	}

	/** Creates new form MiniConsole */
	public MiniConsole() {
		initComponents();
		this.setLocationRelativeTo(null);
		Image image = null;
		try {
			image = ImageIO.read(this.getClass().getResource("terminal.png"));
			this.setIconImage(image);
		} catch (IOException e) {
			// TODO Auto-generated catch block
		}

	}

	public MiniConsole(String name) {
		this();
		this.setTitle(name);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		txtInput = new javax.swing.JTextField();
		jScrollPane1 = new javax.swing.JScrollPane();
		txtOutput = new javax.swing.JTextArea();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("MiniConsole");
		setFont(new java.awt.Font("微软雅黑", 0, 12));
		setResizable(false);
		addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				formKeyPressed(evt);
			}
		});

		txtInput.setFont(new java.awt.Font("微软雅黑", 0, 14));
		txtInput.setMargin(new java.awt.Insets(2, 5, 2, 5));
		txtInput.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				txtInputKeyPressed(evt);
			}
		});

		txtOutput.setColumns(20);
		txtOutput.setEditable(false);
		txtOutput.setFont(new java.awt.Font("微软雅黑", 0, 12));
		txtOutput.setRows(5);
		txtOutput.setMargin(new java.awt.Insets(5, 10, 5, 5));
		txtOutput.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				txtOutputKeyPressed(evt);
			}
		});
		jScrollPane1.setViewportView(txtOutput);

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(org.jdesktop.layout.GroupLayout.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap()
								.add(layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.TRAILING)
										.add(org.jdesktop.layout.GroupLayout.LEADING,
												txtInput,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												618, Short.MAX_VALUE)
										.add(org.jdesktop.layout.GroupLayout.LEADING,
												jScrollPane1,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												618, Short.MAX_VALUE))
								.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				org.jdesktop.layout.GroupLayout.TRAILING,
				layout.createSequentialGroup()
						.addContainerGap()
						.add(jScrollPane1,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								459, Short.MAX_VALUE)
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED)
						.add(txtInput,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.addContainerGap()));

		pack();
	}// </editor-fold>
	//GEN-END:initComponents

	protected void txtInputKeyPressed(KeyEvent evt) {
		// TODO Auto-generated method stub
		formKeyPressed(evt);
	}

	protected void txtOutputKeyPressed(KeyEvent evt) {
		// TODO Auto-generated method stub
		formKeyPressed(evt);
	}

	private void formKeyPressed(java.awt.event.KeyEvent evt) {
		// TODO add your handling code here:
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			String txt = this.txtInput.getText();
			if (txt.isEmpty())
				return;
			if (this.cmdQueue.isEmpty()
					|| !txt.equals(this.cmdQueue.getFirst())) {
				this.cmdQueue.addFirst(txt);
			}
			if (this.cmdQueue.size() > QUEUE_SIZE)
				this.cmdQueue.removeLast();
			this.txtInput.setText("");
			cmdIdx = 0;
			if (this.inputHandler != null)
				this.inputHandler.onLineInput(txt);
		} else if ((evt.getKeyCode() == KeyEvent.VK_UP)) {
			if (this.cmdIdx < this.cmdQueue.size()) {
				this.txtInput.setText(this.cmdQueue.get(this.cmdIdx++));
				if (this.cmdIdx >= this.cmdQueue.size())
					this.cmdIdx = this.cmdQueue.size() - 1;
			}
		} else if ((evt.getKeyCode() == KeyEvent.VK_DOWN)) {
			if (this.cmdIdx > 0) {
				this.txtInput.setText(this.cmdQueue.get(--this.cmdIdx));
			} else if (this.cmdIdx == 0)
				this.txtInput.setText("");
		} else if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_L) {
			this.txtOutput.setText("");
		}
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MiniConsole().setVisible(true);
			}
		});
	}

	public void start() {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				MiniConsole.this.setVisible(true);
			}
		});
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextField txtInput;
	private javax.swing.JTextArea txtOutput;

	// End of variables declaration//GEN-END:variables
	public void println(final Object obj) {
		// TODO Auto-generated method stub
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				txtOutput.append(obj.toString() + "\r\n");
			}
		});
	}

}